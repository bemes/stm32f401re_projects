
STM32F4xx-Nucleo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000d70  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08000f04  08000f04  00010f04  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08000f1c  08000f1c  00010f1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08000f24  08000f24  00010f24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08000f28  08000f28  00010f28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000000c  20000000  08000f2c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000034  2000000c  08000f38  0002000c  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  20000040  08000f38  00020040  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 10 .debug_info   000042e9  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00000f2c  00000000  00000000  00024325  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000d44  00000000  00000000  00025251  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00000328  00000000  00000000  00025f98  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000400  00000000  00000000  000262c0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_macro  00001ae7  00000000  00000000  000266c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   00003d32  00000000  00000000  000281a7  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    00087609  00000000  00000000  0002bed9  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .comment      0000007b  00000000  00000000  000b34e2  2**0
                  CONTENTS, READONLY
 19 .debug_frame  000006f0  00000000  00000000  000b3560  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	2000000c 	.word	0x2000000c
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08000eec 	.word	0x08000eec

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000010 	.word	0x20000010
 80001d0:	08000eec 	.word	0x08000eec

080001d4 <__aeabi_uldivmod>:
 80001d4:	b953      	cbnz	r3, 80001ec <__aeabi_uldivmod+0x18>
 80001d6:	b94a      	cbnz	r2, 80001ec <__aeabi_uldivmod+0x18>
 80001d8:	2900      	cmp	r1, #0
 80001da:	bf08      	it	eq
 80001dc:	2800      	cmpeq	r0, #0
 80001de:	bf1c      	itt	ne
 80001e0:	f04f 31ff 	movne.w	r1, #4294967295
 80001e4:	f04f 30ff 	movne.w	r0, #4294967295
 80001e8:	f000 b972 	b.w	80004d0 <__aeabi_idiv0>
 80001ec:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f4:	f000 f806 	bl	8000204 <__udivmoddi4>
 80001f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000200:	b004      	add	sp, #16
 8000202:	4770      	bx	lr

08000204 <__udivmoddi4>:
 8000204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000208:	9e08      	ldr	r6, [sp, #32]
 800020a:	4604      	mov	r4, r0
 800020c:	4688      	mov	r8, r1
 800020e:	2b00      	cmp	r3, #0
 8000210:	d14b      	bne.n	80002aa <__udivmoddi4+0xa6>
 8000212:	428a      	cmp	r2, r1
 8000214:	4615      	mov	r5, r2
 8000216:	d967      	bls.n	80002e8 <__udivmoddi4+0xe4>
 8000218:	fab2 f282 	clz	r2, r2
 800021c:	b14a      	cbz	r2, 8000232 <__udivmoddi4+0x2e>
 800021e:	f1c2 0720 	rsb	r7, r2, #32
 8000222:	fa01 f302 	lsl.w	r3, r1, r2
 8000226:	fa20 f707 	lsr.w	r7, r0, r7
 800022a:	4095      	lsls	r5, r2
 800022c:	ea47 0803 	orr.w	r8, r7, r3
 8000230:	4094      	lsls	r4, r2
 8000232:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000236:	0c23      	lsrs	r3, r4, #16
 8000238:	fbb8 f7fe 	udiv	r7, r8, lr
 800023c:	fa1f fc85 	uxth.w	ip, r5
 8000240:	fb0e 8817 	mls	r8, lr, r7, r8
 8000244:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000248:	fb07 f10c 	mul.w	r1, r7, ip
 800024c:	4299      	cmp	r1, r3
 800024e:	d909      	bls.n	8000264 <__udivmoddi4+0x60>
 8000250:	18eb      	adds	r3, r5, r3
 8000252:	f107 30ff 	add.w	r0, r7, #4294967295
 8000256:	f080 811b 	bcs.w	8000490 <__udivmoddi4+0x28c>
 800025a:	4299      	cmp	r1, r3
 800025c:	f240 8118 	bls.w	8000490 <__udivmoddi4+0x28c>
 8000260:	3f02      	subs	r7, #2
 8000262:	442b      	add	r3, r5
 8000264:	1a5b      	subs	r3, r3, r1
 8000266:	b2a4      	uxth	r4, r4
 8000268:	fbb3 f0fe 	udiv	r0, r3, lr
 800026c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000270:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000274:	fb00 fc0c 	mul.w	ip, r0, ip
 8000278:	45a4      	cmp	ip, r4
 800027a:	d909      	bls.n	8000290 <__udivmoddi4+0x8c>
 800027c:	192c      	adds	r4, r5, r4
 800027e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000282:	f080 8107 	bcs.w	8000494 <__udivmoddi4+0x290>
 8000286:	45a4      	cmp	ip, r4
 8000288:	f240 8104 	bls.w	8000494 <__udivmoddi4+0x290>
 800028c:	3802      	subs	r0, #2
 800028e:	442c      	add	r4, r5
 8000290:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000294:	eba4 040c 	sub.w	r4, r4, ip
 8000298:	2700      	movs	r7, #0
 800029a:	b11e      	cbz	r6, 80002a4 <__udivmoddi4+0xa0>
 800029c:	40d4      	lsrs	r4, r2
 800029e:	2300      	movs	r3, #0
 80002a0:	e9c6 4300 	strd	r4, r3, [r6]
 80002a4:	4639      	mov	r1, r7
 80002a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002aa:	428b      	cmp	r3, r1
 80002ac:	d909      	bls.n	80002c2 <__udivmoddi4+0xbe>
 80002ae:	2e00      	cmp	r6, #0
 80002b0:	f000 80eb 	beq.w	800048a <__udivmoddi4+0x286>
 80002b4:	2700      	movs	r7, #0
 80002b6:	e9c6 0100 	strd	r0, r1, [r6]
 80002ba:	4638      	mov	r0, r7
 80002bc:	4639      	mov	r1, r7
 80002be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c2:	fab3 f783 	clz	r7, r3
 80002c6:	2f00      	cmp	r7, #0
 80002c8:	d147      	bne.n	800035a <__udivmoddi4+0x156>
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d302      	bcc.n	80002d4 <__udivmoddi4+0xd0>
 80002ce:	4282      	cmp	r2, r0
 80002d0:	f200 80fa 	bhi.w	80004c8 <__udivmoddi4+0x2c4>
 80002d4:	1a84      	subs	r4, r0, r2
 80002d6:	eb61 0303 	sbc.w	r3, r1, r3
 80002da:	2001      	movs	r0, #1
 80002dc:	4698      	mov	r8, r3
 80002de:	2e00      	cmp	r6, #0
 80002e0:	d0e0      	beq.n	80002a4 <__udivmoddi4+0xa0>
 80002e2:	e9c6 4800 	strd	r4, r8, [r6]
 80002e6:	e7dd      	b.n	80002a4 <__udivmoddi4+0xa0>
 80002e8:	b902      	cbnz	r2, 80002ec <__udivmoddi4+0xe8>
 80002ea:	deff      	udf	#255	; 0xff
 80002ec:	fab2 f282 	clz	r2, r2
 80002f0:	2a00      	cmp	r2, #0
 80002f2:	f040 808f 	bne.w	8000414 <__udivmoddi4+0x210>
 80002f6:	1b49      	subs	r1, r1, r5
 80002f8:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002fc:	fa1f f885 	uxth.w	r8, r5
 8000300:	2701      	movs	r7, #1
 8000302:	fbb1 fcfe 	udiv	ip, r1, lr
 8000306:	0c23      	lsrs	r3, r4, #16
 8000308:	fb0e 111c 	mls	r1, lr, ip, r1
 800030c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000310:	fb08 f10c 	mul.w	r1, r8, ip
 8000314:	4299      	cmp	r1, r3
 8000316:	d907      	bls.n	8000328 <__udivmoddi4+0x124>
 8000318:	18eb      	adds	r3, r5, r3
 800031a:	f10c 30ff 	add.w	r0, ip, #4294967295
 800031e:	d202      	bcs.n	8000326 <__udivmoddi4+0x122>
 8000320:	4299      	cmp	r1, r3
 8000322:	f200 80cd 	bhi.w	80004c0 <__udivmoddi4+0x2bc>
 8000326:	4684      	mov	ip, r0
 8000328:	1a59      	subs	r1, r3, r1
 800032a:	b2a3      	uxth	r3, r4
 800032c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000330:	fb0e 1410 	mls	r4, lr, r0, r1
 8000334:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000338:	fb08 f800 	mul.w	r8, r8, r0
 800033c:	45a0      	cmp	r8, r4
 800033e:	d907      	bls.n	8000350 <__udivmoddi4+0x14c>
 8000340:	192c      	adds	r4, r5, r4
 8000342:	f100 33ff 	add.w	r3, r0, #4294967295
 8000346:	d202      	bcs.n	800034e <__udivmoddi4+0x14a>
 8000348:	45a0      	cmp	r8, r4
 800034a:	f200 80b6 	bhi.w	80004ba <__udivmoddi4+0x2b6>
 800034e:	4618      	mov	r0, r3
 8000350:	eba4 0408 	sub.w	r4, r4, r8
 8000354:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000358:	e79f      	b.n	800029a <__udivmoddi4+0x96>
 800035a:	f1c7 0c20 	rsb	ip, r7, #32
 800035e:	40bb      	lsls	r3, r7
 8000360:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000364:	ea4e 0e03 	orr.w	lr, lr, r3
 8000368:	fa01 f407 	lsl.w	r4, r1, r7
 800036c:	fa20 f50c 	lsr.w	r5, r0, ip
 8000370:	fa21 f30c 	lsr.w	r3, r1, ip
 8000374:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000378:	4325      	orrs	r5, r4
 800037a:	fbb3 f9f8 	udiv	r9, r3, r8
 800037e:	0c2c      	lsrs	r4, r5, #16
 8000380:	fb08 3319 	mls	r3, r8, r9, r3
 8000384:	fa1f fa8e 	uxth.w	sl, lr
 8000388:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 800038c:	fb09 f40a 	mul.w	r4, r9, sl
 8000390:	429c      	cmp	r4, r3
 8000392:	fa02 f207 	lsl.w	r2, r2, r7
 8000396:	fa00 f107 	lsl.w	r1, r0, r7
 800039a:	d90b      	bls.n	80003b4 <__udivmoddi4+0x1b0>
 800039c:	eb1e 0303 	adds.w	r3, lr, r3
 80003a0:	f109 30ff 	add.w	r0, r9, #4294967295
 80003a4:	f080 8087 	bcs.w	80004b6 <__udivmoddi4+0x2b2>
 80003a8:	429c      	cmp	r4, r3
 80003aa:	f240 8084 	bls.w	80004b6 <__udivmoddi4+0x2b2>
 80003ae:	f1a9 0902 	sub.w	r9, r9, #2
 80003b2:	4473      	add	r3, lr
 80003b4:	1b1b      	subs	r3, r3, r4
 80003b6:	b2ad      	uxth	r5, r5
 80003b8:	fbb3 f0f8 	udiv	r0, r3, r8
 80003bc:	fb08 3310 	mls	r3, r8, r0, r3
 80003c0:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003c4:	fb00 fa0a 	mul.w	sl, r0, sl
 80003c8:	45a2      	cmp	sl, r4
 80003ca:	d908      	bls.n	80003de <__udivmoddi4+0x1da>
 80003cc:	eb1e 0404 	adds.w	r4, lr, r4
 80003d0:	f100 33ff 	add.w	r3, r0, #4294967295
 80003d4:	d26b      	bcs.n	80004ae <__udivmoddi4+0x2aa>
 80003d6:	45a2      	cmp	sl, r4
 80003d8:	d969      	bls.n	80004ae <__udivmoddi4+0x2aa>
 80003da:	3802      	subs	r0, #2
 80003dc:	4474      	add	r4, lr
 80003de:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003e2:	fba0 8902 	umull	r8, r9, r0, r2
 80003e6:	eba4 040a 	sub.w	r4, r4, sl
 80003ea:	454c      	cmp	r4, r9
 80003ec:	46c2      	mov	sl, r8
 80003ee:	464b      	mov	r3, r9
 80003f0:	d354      	bcc.n	800049c <__udivmoddi4+0x298>
 80003f2:	d051      	beq.n	8000498 <__udivmoddi4+0x294>
 80003f4:	2e00      	cmp	r6, #0
 80003f6:	d069      	beq.n	80004cc <__udivmoddi4+0x2c8>
 80003f8:	ebb1 050a 	subs.w	r5, r1, sl
 80003fc:	eb64 0403 	sbc.w	r4, r4, r3
 8000400:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000404:	40fd      	lsrs	r5, r7
 8000406:	40fc      	lsrs	r4, r7
 8000408:	ea4c 0505 	orr.w	r5, ip, r5
 800040c:	e9c6 5400 	strd	r5, r4, [r6]
 8000410:	2700      	movs	r7, #0
 8000412:	e747      	b.n	80002a4 <__udivmoddi4+0xa0>
 8000414:	f1c2 0320 	rsb	r3, r2, #32
 8000418:	fa20 f703 	lsr.w	r7, r0, r3
 800041c:	4095      	lsls	r5, r2
 800041e:	fa01 f002 	lsl.w	r0, r1, r2
 8000422:	fa21 f303 	lsr.w	r3, r1, r3
 8000426:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800042a:	4338      	orrs	r0, r7
 800042c:	0c01      	lsrs	r1, r0, #16
 800042e:	fbb3 f7fe 	udiv	r7, r3, lr
 8000432:	fa1f f885 	uxth.w	r8, r5
 8000436:	fb0e 3317 	mls	r3, lr, r7, r3
 800043a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800043e:	fb07 f308 	mul.w	r3, r7, r8
 8000442:	428b      	cmp	r3, r1
 8000444:	fa04 f402 	lsl.w	r4, r4, r2
 8000448:	d907      	bls.n	800045a <__udivmoddi4+0x256>
 800044a:	1869      	adds	r1, r5, r1
 800044c:	f107 3cff 	add.w	ip, r7, #4294967295
 8000450:	d22f      	bcs.n	80004b2 <__udivmoddi4+0x2ae>
 8000452:	428b      	cmp	r3, r1
 8000454:	d92d      	bls.n	80004b2 <__udivmoddi4+0x2ae>
 8000456:	3f02      	subs	r7, #2
 8000458:	4429      	add	r1, r5
 800045a:	1acb      	subs	r3, r1, r3
 800045c:	b281      	uxth	r1, r0
 800045e:	fbb3 f0fe 	udiv	r0, r3, lr
 8000462:	fb0e 3310 	mls	r3, lr, r0, r3
 8000466:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046a:	fb00 f308 	mul.w	r3, r0, r8
 800046e:	428b      	cmp	r3, r1
 8000470:	d907      	bls.n	8000482 <__udivmoddi4+0x27e>
 8000472:	1869      	adds	r1, r5, r1
 8000474:	f100 3cff 	add.w	ip, r0, #4294967295
 8000478:	d217      	bcs.n	80004aa <__udivmoddi4+0x2a6>
 800047a:	428b      	cmp	r3, r1
 800047c:	d915      	bls.n	80004aa <__udivmoddi4+0x2a6>
 800047e:	3802      	subs	r0, #2
 8000480:	4429      	add	r1, r5
 8000482:	1ac9      	subs	r1, r1, r3
 8000484:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000488:	e73b      	b.n	8000302 <__udivmoddi4+0xfe>
 800048a:	4637      	mov	r7, r6
 800048c:	4630      	mov	r0, r6
 800048e:	e709      	b.n	80002a4 <__udivmoddi4+0xa0>
 8000490:	4607      	mov	r7, r0
 8000492:	e6e7      	b.n	8000264 <__udivmoddi4+0x60>
 8000494:	4618      	mov	r0, r3
 8000496:	e6fb      	b.n	8000290 <__udivmoddi4+0x8c>
 8000498:	4541      	cmp	r1, r8
 800049a:	d2ab      	bcs.n	80003f4 <__udivmoddi4+0x1f0>
 800049c:	ebb8 0a02 	subs.w	sl, r8, r2
 80004a0:	eb69 020e 	sbc.w	r2, r9, lr
 80004a4:	3801      	subs	r0, #1
 80004a6:	4613      	mov	r3, r2
 80004a8:	e7a4      	b.n	80003f4 <__udivmoddi4+0x1f0>
 80004aa:	4660      	mov	r0, ip
 80004ac:	e7e9      	b.n	8000482 <__udivmoddi4+0x27e>
 80004ae:	4618      	mov	r0, r3
 80004b0:	e795      	b.n	80003de <__udivmoddi4+0x1da>
 80004b2:	4667      	mov	r7, ip
 80004b4:	e7d1      	b.n	800045a <__udivmoddi4+0x256>
 80004b6:	4681      	mov	r9, r0
 80004b8:	e77c      	b.n	80003b4 <__udivmoddi4+0x1b0>
 80004ba:	3802      	subs	r0, #2
 80004bc:	442c      	add	r4, r5
 80004be:	e747      	b.n	8000350 <__udivmoddi4+0x14c>
 80004c0:	f1ac 0c02 	sub.w	ip, ip, #2
 80004c4:	442b      	add	r3, r5
 80004c6:	e72f      	b.n	8000328 <__udivmoddi4+0x124>
 80004c8:	4638      	mov	r0, r7
 80004ca:	e708      	b.n	80002de <__udivmoddi4+0xda>
 80004cc:	4637      	mov	r7, r6
 80004ce:	e6e9      	b.n	80002a4 <__udivmoddi4+0xa0>

080004d0 <__aeabi_idiv0>:
 80004d0:	4770      	bx	lr
 80004d2:	bf00      	nop

080004d4 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80004d4:	490f      	ldr	r1, [pc, #60]	; (8000514 <SystemInit+0x40>)
 80004d6:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 80004da:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80004de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80004e2:	4b0d      	ldr	r3, [pc, #52]	; (8000518 <SystemInit+0x44>)
 80004e4:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80004e6:	2000      	movs	r0, #0
  RCC->CR |= (uint32_t)0x00000001;
 80004e8:	f042 0201 	orr.w	r2, r2, #1
 80004ec:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 80004ee:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80004f0:	681a      	ldr	r2, [r3, #0]
 80004f2:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 80004f6:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80004fa:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80004fc:	4a07      	ldr	r2, [pc, #28]	; (800051c <SystemInit+0x48>)
 80004fe:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000500:	681a      	ldr	r2, [r3, #0]
 8000502:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8000506:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8000508:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800050a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800050e:	608b      	str	r3, [r1, #8]
#endif
}
 8000510:	4770      	bx	lr
 8000512:	bf00      	nop
 8000514:	e000ed00 	.word	0xe000ed00
 8000518:	40023800 	.word	0x40023800
 800051c:	24003010 	.word	0x24003010

08000520 <HAL_MspInit>:
__weak void HAL_MspInit(void)
{
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
 8000520:	4770      	bx	lr
	...

08000524 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000524:	b570      	push	{r4, r5, r6, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000526:	4a0e      	ldr	r2, [pc, #56]	; (8000560 <HAL_InitTick+0x3c>)
 8000528:	4e0e      	ldr	r6, [pc, #56]	; (8000564 <HAL_InitTick+0x40>)
{
 800052a:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800052c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000530:	7830      	ldrb	r0, [r6, #0]
 8000532:	fbb3 f3f0 	udiv	r3, r3, r0
 8000536:	6810      	ldr	r0, [r2, #0]
 8000538:	fbb0 f0f3 	udiv	r0, r0, r3
 800053c:	f000 f89a 	bl	8000674 <HAL_SYSTICK_Config>
 8000540:	4604      	mov	r4, r0
 8000542:	b950      	cbnz	r0, 800055a <HAL_InitTick+0x36>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000544:	2d0f      	cmp	r5, #15
 8000546:	d808      	bhi.n	800055a <HAL_InitTick+0x36>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000548:	4602      	mov	r2, r0
 800054a:	4629      	mov	r1, r5
 800054c:	f04f 30ff 	mov.w	r0, #4294967295
 8000550:	f000 f85c 	bl	800060c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000554:	6075      	str	r5, [r6, #4]
 8000556:	4620      	mov	r0, r4
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8000558:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 800055a:	2001      	movs	r0, #1
 800055c:	e7fc      	b.n	8000558 <HAL_InitTick+0x34>
 800055e:	bf00      	nop
 8000560:	20000000 	.word	0x20000000
 8000564:	20000004 	.word	0x20000004

08000568 <HAL_Init>:
{
 8000568:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800056a:	4b0b      	ldr	r3, [pc, #44]	; (8000598 <HAL_Init+0x30>)
 800056c:	681a      	ldr	r2, [r3, #0]
 800056e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000572:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000574:	681a      	ldr	r2, [r3, #0]
 8000576:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800057a:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800057c:	681a      	ldr	r2, [r3, #0]
 800057e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000582:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000584:	2003      	movs	r0, #3
 8000586:	f000 f82f 	bl	80005e8 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 800058a:	200f      	movs	r0, #15
 800058c:	f7ff ffca 	bl	8000524 <HAL_InitTick>
  HAL_MspInit();
 8000590:	f7ff ffc6 	bl	8000520 <HAL_MspInit>
}
 8000594:	2000      	movs	r0, #0
 8000596:	bd08      	pop	{r3, pc}
 8000598:	40023c00 	.word	0x40023c00

0800059c <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 800059c:	4a03      	ldr	r2, [pc, #12]	; (80005ac <HAL_IncTick+0x10>)
 800059e:	4b04      	ldr	r3, [pc, #16]	; (80005b0 <HAL_IncTick+0x14>)
 80005a0:	6811      	ldr	r1, [r2, #0]
 80005a2:	781b      	ldrb	r3, [r3, #0]
 80005a4:	440b      	add	r3, r1
 80005a6:	6013      	str	r3, [r2, #0]
}
 80005a8:	4770      	bx	lr
 80005aa:	bf00      	nop
 80005ac:	2000003c 	.word	0x2000003c
 80005b0:	20000004 	.word	0x20000004

080005b4 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80005b4:	4b01      	ldr	r3, [pc, #4]	; (80005bc <HAL_GetTick+0x8>)
 80005b6:	6818      	ldr	r0, [r3, #0]
}
 80005b8:	4770      	bx	lr
 80005ba:	bf00      	nop
 80005bc:	2000003c 	.word	0x2000003c

080005c0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80005c0:	b538      	push	{r3, r4, r5, lr}
 80005c2:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80005c4:	f7ff fff6 	bl	80005b4 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80005c8:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 80005ca:	bf1c      	itt	ne
 80005cc:	4b05      	ldrne	r3, [pc, #20]	; (80005e4 <HAL_Delay+0x24>)
 80005ce:	781b      	ldrbne	r3, [r3, #0]
  uint32_t tickstart = HAL_GetTick();
 80005d0:	4605      	mov	r5, r0
    wait += (uint32_t)(uwTickFreq);
 80005d2:	bf18      	it	ne
 80005d4:	18e4      	addne	r4, r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 80005d6:	f7ff ffed 	bl	80005b4 <HAL_GetTick>
 80005da:	1b40      	subs	r0, r0, r5
 80005dc:	42a0      	cmp	r0, r4
 80005de:	d3fa      	bcc.n	80005d6 <HAL_Delay+0x16>
  {
  }
}
 80005e0:	bd38      	pop	{r3, r4, r5, pc}
 80005e2:	bf00      	nop
 80005e4:	20000004 	.word	0x20000004

080005e8 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80005e8:	4a07      	ldr	r2, [pc, #28]	; (8000608 <HAL_NVIC_SetPriorityGrouping+0x20>)
 80005ea:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80005ec:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80005f0:	041b      	lsls	r3, r3, #16
 80005f2:	0c1b      	lsrs	r3, r3, #16
 80005f4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80005f8:	0200      	lsls	r0, r0, #8
 80005fa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80005fe:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 8000602:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8000604:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8000606:	4770      	bx	lr
 8000608:	e000ed00 	.word	0xe000ed00

0800060c <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800060c:	4b17      	ldr	r3, [pc, #92]	; (800066c <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800060e:	b570      	push	{r4, r5, r6, lr}
 8000610:	68dc      	ldr	r4, [r3, #12]
 8000612:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000616:	f1c4 0507 	rsb	r5, r4, #7
 800061a:	2d04      	cmp	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800061c:	f104 0304 	add.w	r3, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000620:	bf28      	it	cs
 8000622:	2504      	movcs	r5, #4

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000624:	f04f 36ff 	mov.w	r6, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000628:	2b06      	cmp	r3, #6
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800062a:	fa06 f305 	lsl.w	r3, r6, r5
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800062e:	bf8c      	ite	hi
 8000630:	3c03      	subhi	r4, #3
 8000632:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000634:	ea21 0303 	bic.w	r3, r1, r3
 8000638:	40a3      	lsls	r3, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800063a:	fa06 f404 	lsl.w	r4, r6, r4
 800063e:	ea22 0404 	bic.w	r4, r2, r4
  if ((int32_t)(IRQn) >= 0)
 8000642:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000644:	ea43 0304 	orr.w	r3, r3, r4
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000648:	bfa8      	it	ge
 800064a:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
 800064e:	ea4f 1303 	mov.w	r3, r3, lsl #4
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000652:	bfbc      	itt	lt
 8000654:	f000 000f 	andlt.w	r0, r0, #15
 8000658:	4a05      	ldrlt	r2, [pc, #20]	; (8000670 <HAL_NVIC_SetPriority+0x64>)
 800065a:	b2db      	uxtb	r3, r3
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800065c:	bfaa      	itet	ge
 800065e:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000662:	5413      	strblt	r3, [r2, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000664:	f880 3300 	strbge.w	r3, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8000668:	bd70      	pop	{r4, r5, r6, pc}
 800066a:	bf00      	nop
 800066c:	e000ed00 	.word	0xe000ed00
 8000670:	e000ed14 	.word	0xe000ed14

08000674 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000674:	3801      	subs	r0, #1
 8000676:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800067a:	d20a      	bcs.n	8000692 <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800067c:	4b06      	ldr	r3, [pc, #24]	; (8000698 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800067e:	4a07      	ldr	r2, [pc, #28]	; (800069c <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000680:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000682:	21f0      	movs	r1, #240	; 0xf0
 8000684:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000688:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800068a:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800068c:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800068e:	601a      	str	r2, [r3, #0]
 8000690:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000692:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000694:	4770      	bx	lr
 8000696:	bf00      	nop
 8000698:	e000e010 	.word	0xe000e010
 800069c:	e000ed00 	.word	0xe000ed00

080006a0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80006a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80006a4:	b085      	sub	sp, #20
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80006a6:	680b      	ldr	r3, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006a8:	f8df 818c 	ldr.w	r8, [pc, #396]	; 8000838 <HAL_GPIO_Init+0x198>
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80006ac:	4a60      	ldr	r2, [pc, #384]	; (8000830 <HAL_GPIO_Init+0x190>)
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80006ae:	9301      	str	r3, [sp, #4]
    ioposition = 0x01U << position;
 80006b0:	f04f 0901 	mov.w	r9, #1
  for(position = 0U; position < GPIO_NUMBER; position++)
 80006b4:	2300      	movs	r3, #0
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80006b6:	9d01      	ldr	r5, [sp, #4]
    ioposition = 0x01U << position;
 80006b8:	fa09 f403 	lsl.w	r4, r9, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80006bc:	4025      	ands	r5, r4
    if(iocurrent == ioposition)
 80006be:	42ac      	cmp	r4, r5
 80006c0:	f040 80a6 	bne.w	8000810 <HAL_GPIO_Init+0x170>
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80006c4:	684c      	ldr	r4, [r1, #4]
 80006c6:	f024 0c10 	bic.w	ip, r4, #16
 80006ca:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 80006ce:	2603      	movs	r6, #3
 80006d0:	f10c 37ff 	add.w	r7, ip, #4294967295
 80006d4:	fa06 f60e 	lsl.w	r6, r6, lr
 80006d8:	2f01      	cmp	r7, #1
 80006da:	ea6f 0606 	mvn.w	r6, r6
 80006de:	d811      	bhi.n	8000704 <HAL_GPIO_Init+0x64>
        temp = GPIOx->OSPEEDR; 
 80006e0:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80006e2:	ea07 0a06 	and.w	sl, r7, r6
        temp |= (GPIO_Init->Speed << (position * 2U));
 80006e6:	68cf      	ldr	r7, [r1, #12]
 80006e8:	fa07 f70e 	lsl.w	r7, r7, lr
 80006ec:	ea47 070a 	orr.w	r7, r7, sl
        GPIOx->OSPEEDR = temp;
 80006f0:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 80006f2:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80006f4:	ea27 0a05 	bic.w	sl, r7, r5
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80006f8:	f3c4 1700 	ubfx	r7, r4, #4, #1
 80006fc:	409f      	lsls	r7, r3
 80006fe:	ea47 070a 	orr.w	r7, r7, sl
        GPIOx->OTYPER = temp;
 8000702:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 8000704:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000706:	ea07 0a06 	and.w	sl, r7, r6
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800070a:	688f      	ldr	r7, [r1, #8]
 800070c:	fa07 f70e 	lsl.w	r7, r7, lr
 8000710:	ea47 070a 	orr.w	r7, r7, sl
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000714:	f1bc 0f02 	cmp.w	ip, #2
      GPIOx->PUPDR = temp;
 8000718:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800071a:	d116      	bne.n	800074a <HAL_GPIO_Init+0xaa>
        temp = GPIOx->AFR[position >> 3U];
 800071c:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 8000720:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000724:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 8000728:	f8da 7020 	ldr.w	r7, [sl, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800072c:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8000730:	f04f 0c0f 	mov.w	ip, #15
 8000734:	fa0c fc0b 	lsl.w	ip, ip, fp
 8000738:	ea27 0c0c 	bic.w	ip, r7, ip
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800073c:	690f      	ldr	r7, [r1, #16]
 800073e:	fa07 f70b 	lsl.w	r7, r7, fp
 8000742:	ea47 070c 	orr.w	r7, r7, ip
        GPIOx->AFR[position >> 3U] = temp;
 8000746:	f8ca 7020 	str.w	r7, [sl, #32]
      temp = GPIOx->MODER;
 800074a:	6807      	ldr	r7, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800074c:	403e      	ands	r6, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800074e:	f004 0703 	and.w	r7, r4, #3
 8000752:	fa07 fe0e 	lsl.w	lr, r7, lr
 8000756:	ea4e 0606 	orr.w	r6, lr, r6
      GPIOx->MODER = temp;
 800075a:	6006      	str	r6, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800075c:	00e6      	lsls	r6, r4, #3
 800075e:	d557      	bpl.n	8000810 <HAL_GPIO_Init+0x170>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000760:	f04f 0b00 	mov.w	fp, #0
 8000764:	f8cd b00c 	str.w	fp, [sp, #12]
 8000768:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800076c:	4e31      	ldr	r6, [pc, #196]	; (8000834 <HAL_GPIO_Init+0x194>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800076e:	f447 4780 	orr.w	r7, r7, #16384	; 0x4000
 8000772:	f8c8 7044 	str.w	r7, [r8, #68]	; 0x44
 8000776:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
 800077a:	f407 4780 	and.w	r7, r7, #16384	; 0x4000
 800077e:	9703      	str	r7, [sp, #12]
 8000780:	9f03      	ldr	r7, [sp, #12]
 8000782:	f023 0703 	bic.w	r7, r3, #3
 8000786:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 800078a:	f507 379c 	add.w	r7, r7, #79872	; 0x13800
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800078e:	f003 0e03 	and.w	lr, r3, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 8000792:	f8d7 a008 	ldr.w	sl, [r7, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000796:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 800079a:	f04f 0c0f 	mov.w	ip, #15
 800079e:	fa0c fc0e 	lsl.w	ip, ip, lr
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80007a2:	42b0      	cmp	r0, r6
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80007a4:	ea2a 0c0c 	bic.w	ip, sl, ip
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80007a8:	d039      	beq.n	800081e <HAL_GPIO_Init+0x17e>
 80007aa:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80007ae:	42b0      	cmp	r0, r6
 80007b0:	d037      	beq.n	8000822 <HAL_GPIO_Init+0x182>
 80007b2:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80007b6:	42b0      	cmp	r0, r6
 80007b8:	d035      	beq.n	8000826 <HAL_GPIO_Init+0x186>
 80007ba:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80007be:	42b0      	cmp	r0, r6
 80007c0:	d033      	beq.n	800082a <HAL_GPIO_Init+0x18a>
 80007c2:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80007c6:	42b0      	cmp	r0, r6
 80007c8:	bf14      	ite	ne
 80007ca:	2607      	movne	r6, #7
 80007cc:	2604      	moveq	r6, #4
 80007ce:	fa06 f60e 	lsl.w	r6, r6, lr
 80007d2:	ea46 060c 	orr.w	r6, r6, ip
        SYSCFG->EXTICR[position >> 2U] = temp;
 80007d6:	60be      	str	r6, [r7, #8]
        temp = EXTI->IMR;
 80007d8:	6816      	ldr	r6, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 80007da:	43ef      	mvns	r7, r5
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80007dc:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
 80007e0:	bf0c      	ite	eq
 80007e2:	403e      	andeq	r6, r7
        {
          temp |= iocurrent;
 80007e4:	432e      	orrne	r6, r5
        }
        EXTI->IMR = temp;
 80007e6:	6016      	str	r6, [r2, #0]

        temp = EXTI->EMR;
 80007e8:	6856      	ldr	r6, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80007ea:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 80007ee:	bf0c      	ite	eq
 80007f0:	403e      	andeq	r6, r7
        {
          temp |= iocurrent;
 80007f2:	432e      	orrne	r6, r5
        }
        EXTI->EMR = temp;
 80007f4:	6056      	str	r6, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80007f6:	6896      	ldr	r6, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80007f8:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 80007fc:	bf0c      	ite	eq
 80007fe:	403e      	andeq	r6, r7
        {
          temp |= iocurrent;
 8000800:	432e      	orrne	r6, r5
        }
        EXTI->RTSR = temp;
 8000802:	6096      	str	r6, [r2, #8]

        temp = EXTI->FTSR;
 8000804:	68d6      	ldr	r6, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000806:	02a4      	lsls	r4, r4, #10
        temp &= ~((uint32_t)iocurrent);
 8000808:	bf54      	ite	pl
 800080a:	403e      	andpl	r6, r7
        {
          temp |= iocurrent;
 800080c:	432e      	orrmi	r6, r5
        }
        EXTI->FTSR = temp;
 800080e:	60d6      	str	r6, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000810:	3301      	adds	r3, #1
 8000812:	2b10      	cmp	r3, #16
 8000814:	f47f af4f 	bne.w	80006b6 <HAL_GPIO_Init+0x16>
      }
    }
  }
}
 8000818:	b005      	add	sp, #20
 800081a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800081e:	465e      	mov	r6, fp
 8000820:	e7d5      	b.n	80007ce <HAL_GPIO_Init+0x12e>
 8000822:	2601      	movs	r6, #1
 8000824:	e7d3      	b.n	80007ce <HAL_GPIO_Init+0x12e>
 8000826:	2602      	movs	r6, #2
 8000828:	e7d1      	b.n	80007ce <HAL_GPIO_Init+0x12e>
 800082a:	2603      	movs	r6, #3
 800082c:	e7cf      	b.n	80007ce <HAL_GPIO_Init+0x12e>
 800082e:	bf00      	nop
 8000830:	40013c00 	.word	0x40013c00
 8000834:	40020000 	.word	0x40020000
 8000838:	40023800 	.word	0x40023800

0800083c <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800083c:	6903      	ldr	r3, [r0, #16]
 800083e:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 8000840:	bf14      	ite	ne
 8000842:	2001      	movne	r0, #1
 8000844:	2000      	moveq	r0, #0
 8000846:	4770      	bx	lr

08000848 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000848:	b10a      	cbz	r2, 800084e <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800084a:	6181      	str	r1, [r0, #24]
  }
}
 800084c:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800084e:	0409      	lsls	r1, r1, #16
 8000850:	e7fb      	b.n	800084a <HAL_GPIO_WritePin+0x2>
	...

08000854 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000854:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000858:	4604      	mov	r4, r0
 800085a:	b908      	cbnz	r0, 8000860 <HAL_RCC_OscConfig+0xc>
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
      {
        return HAL_ERROR;
 800085c:	2001      	movs	r0, #1
 800085e:	e03f      	b.n	80008e0 <HAL_RCC_OscConfig+0x8c>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000860:	6803      	ldr	r3, [r0, #0]
 8000862:	07dd      	lsls	r5, r3, #31
 8000864:	d410      	bmi.n	8000888 <HAL_RCC_OscConfig+0x34>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000866:	6823      	ldr	r3, [r4, #0]
 8000868:	0798      	lsls	r0, r3, #30
 800086a:	d45a      	bmi.n	8000922 <HAL_RCC_OscConfig+0xce>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800086c:	6823      	ldr	r3, [r4, #0]
 800086e:	071a      	lsls	r2, r3, #28
 8000870:	f100 809c 	bmi.w	80009ac <HAL_RCC_OscConfig+0x158>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000874:	6823      	ldr	r3, [r4, #0]
 8000876:	075b      	lsls	r3, r3, #29
 8000878:	f100 80ba 	bmi.w	80009f0 <HAL_RCC_OscConfig+0x19c>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800087c:	69a0      	ldr	r0, [r4, #24]
 800087e:	2800      	cmp	r0, #0
 8000880:	f040 811b 	bne.w	8000aba <HAL_RCC_OscConfig+0x266>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 8000884:	2000      	movs	r0, #0
 8000886:	e02b      	b.n	80008e0 <HAL_RCC_OscConfig+0x8c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000888:	4ba7      	ldr	r3, [pc, #668]	; (8000b28 <HAL_RCC_OscConfig+0x2d4>)
 800088a:	689a      	ldr	r2, [r3, #8]
 800088c:	f002 020c 	and.w	r2, r2, #12
 8000890:	2a04      	cmp	r2, #4
 8000892:	d007      	beq.n	80008a4 <HAL_RCC_OscConfig+0x50>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000894:	689a      	ldr	r2, [r3, #8]
 8000896:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800089a:	2a08      	cmp	r2, #8
 800089c:	d10a      	bne.n	80008b4 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800089e:	685b      	ldr	r3, [r3, #4]
 80008a0:	0259      	lsls	r1, r3, #9
 80008a2:	d507      	bpl.n	80008b4 <HAL_RCC_OscConfig+0x60>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80008a4:	4ba0      	ldr	r3, [pc, #640]	; (8000b28 <HAL_RCC_OscConfig+0x2d4>)
 80008a6:	681b      	ldr	r3, [r3, #0]
 80008a8:	039a      	lsls	r2, r3, #14
 80008aa:	d5dc      	bpl.n	8000866 <HAL_RCC_OscConfig+0x12>
 80008ac:	6863      	ldr	r3, [r4, #4]
 80008ae:	2b00      	cmp	r3, #0
 80008b0:	d1d9      	bne.n	8000866 <HAL_RCC_OscConfig+0x12>
 80008b2:	e7d3      	b.n	800085c <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80008b4:	6863      	ldr	r3, [r4, #4]
 80008b6:	4d9c      	ldr	r5, [pc, #624]	; (8000b28 <HAL_RCC_OscConfig+0x2d4>)
 80008b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80008bc:	d113      	bne.n	80008e6 <HAL_RCC_OscConfig+0x92>
 80008be:	682b      	ldr	r3, [r5, #0]
 80008c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80008c4:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80008c6:	f7ff fe75 	bl	80005b4 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80008ca:	4d97      	ldr	r5, [pc, #604]	; (8000b28 <HAL_RCC_OscConfig+0x2d4>)
        tickstart = HAL_GetTick();
 80008cc:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80008ce:	682b      	ldr	r3, [r5, #0]
 80008d0:	039b      	lsls	r3, r3, #14
 80008d2:	d4c8      	bmi.n	8000866 <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80008d4:	f7ff fe6e 	bl	80005b4 <HAL_GetTick>
 80008d8:	1b80      	subs	r0, r0, r6
 80008da:	2864      	cmp	r0, #100	; 0x64
 80008dc:	d9f7      	bls.n	80008ce <HAL_RCC_OscConfig+0x7a>
            return HAL_TIMEOUT;
 80008de:	2003      	movs	r0, #3
}
 80008e0:	b002      	add	sp, #8
 80008e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80008e6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80008ea:	d104      	bne.n	80008f6 <HAL_RCC_OscConfig+0xa2>
 80008ec:	682b      	ldr	r3, [r5, #0]
 80008ee:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80008f2:	602b      	str	r3, [r5, #0]
 80008f4:	e7e3      	b.n	80008be <HAL_RCC_OscConfig+0x6a>
 80008f6:	682a      	ldr	r2, [r5, #0]
 80008f8:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80008fc:	602a      	str	r2, [r5, #0]
 80008fe:	682a      	ldr	r2, [r5, #0]
 8000900:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8000904:	602a      	str	r2, [r5, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8000906:	2b00      	cmp	r3, #0
 8000908:	d1dd      	bne.n	80008c6 <HAL_RCC_OscConfig+0x72>
        tickstart = HAL_GetTick();
 800090a:	f7ff fe53 	bl	80005b4 <HAL_GetTick>
 800090e:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000910:	682b      	ldr	r3, [r5, #0]
 8000912:	039f      	lsls	r7, r3, #14
 8000914:	d5a7      	bpl.n	8000866 <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000916:	f7ff fe4d 	bl	80005b4 <HAL_GetTick>
 800091a:	1b80      	subs	r0, r0, r6
 800091c:	2864      	cmp	r0, #100	; 0x64
 800091e:	d9f7      	bls.n	8000910 <HAL_RCC_OscConfig+0xbc>
 8000920:	e7dd      	b.n	80008de <HAL_RCC_OscConfig+0x8a>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000922:	4b81      	ldr	r3, [pc, #516]	; (8000b28 <HAL_RCC_OscConfig+0x2d4>)
 8000924:	689a      	ldr	r2, [r3, #8]
 8000926:	f012 0f0c 	tst.w	r2, #12
 800092a:	d007      	beq.n	800093c <HAL_RCC_OscConfig+0xe8>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800092c:	689a      	ldr	r2, [r3, #8]
 800092e:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000932:	2a08      	cmp	r2, #8
 8000934:	d111      	bne.n	800095a <HAL_RCC_OscConfig+0x106>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000936:	685b      	ldr	r3, [r3, #4]
 8000938:	025e      	lsls	r6, r3, #9
 800093a:	d40e      	bmi.n	800095a <HAL_RCC_OscConfig+0x106>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800093c:	4b7a      	ldr	r3, [pc, #488]	; (8000b28 <HAL_RCC_OscConfig+0x2d4>)
 800093e:	681a      	ldr	r2, [r3, #0]
 8000940:	0795      	lsls	r5, r2, #30
 8000942:	d502      	bpl.n	800094a <HAL_RCC_OscConfig+0xf6>
 8000944:	68e2      	ldr	r2, [r4, #12]
 8000946:	2a01      	cmp	r2, #1
 8000948:	d188      	bne.n	800085c <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800094a:	681a      	ldr	r2, [r3, #0]
 800094c:	6921      	ldr	r1, [r4, #16]
 800094e:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 8000952:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 8000956:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000958:	e788      	b.n	800086c <HAL_RCC_OscConfig+0x18>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800095a:	68e2      	ldr	r2, [r4, #12]
 800095c:	4b73      	ldr	r3, [pc, #460]	; (8000b2c <HAL_RCC_OscConfig+0x2d8>)
 800095e:	b1b2      	cbz	r2, 800098e <HAL_RCC_OscConfig+0x13a>
        __HAL_RCC_HSI_ENABLE();
 8000960:	2201      	movs	r2, #1
 8000962:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000964:	f7ff fe26 	bl	80005b4 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000968:	4d6f      	ldr	r5, [pc, #444]	; (8000b28 <HAL_RCC_OscConfig+0x2d4>)
        tickstart = HAL_GetTick();
 800096a:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800096c:	682b      	ldr	r3, [r5, #0]
 800096e:	0798      	lsls	r0, r3, #30
 8000970:	d507      	bpl.n	8000982 <HAL_RCC_OscConfig+0x12e>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000972:	682b      	ldr	r3, [r5, #0]
 8000974:	6922      	ldr	r2, [r4, #16]
 8000976:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800097a:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800097e:	602b      	str	r3, [r5, #0]
 8000980:	e774      	b.n	800086c <HAL_RCC_OscConfig+0x18>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000982:	f7ff fe17 	bl	80005b4 <HAL_GetTick>
 8000986:	1b80      	subs	r0, r0, r6
 8000988:	2802      	cmp	r0, #2
 800098a:	d9ef      	bls.n	800096c <HAL_RCC_OscConfig+0x118>
 800098c:	e7a7      	b.n	80008de <HAL_RCC_OscConfig+0x8a>
        __HAL_RCC_HSI_DISABLE();
 800098e:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000990:	f7ff fe10 	bl	80005b4 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000994:	4d64      	ldr	r5, [pc, #400]	; (8000b28 <HAL_RCC_OscConfig+0x2d4>)
        tickstart = HAL_GetTick();
 8000996:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000998:	682b      	ldr	r3, [r5, #0]
 800099a:	0799      	lsls	r1, r3, #30
 800099c:	f57f af66 	bpl.w	800086c <HAL_RCC_OscConfig+0x18>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80009a0:	f7ff fe08 	bl	80005b4 <HAL_GetTick>
 80009a4:	1b80      	subs	r0, r0, r6
 80009a6:	2802      	cmp	r0, #2
 80009a8:	d9f6      	bls.n	8000998 <HAL_RCC_OscConfig+0x144>
 80009aa:	e798      	b.n	80008de <HAL_RCC_OscConfig+0x8a>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80009ac:	6962      	ldr	r2, [r4, #20]
 80009ae:	4b60      	ldr	r3, [pc, #384]	; (8000b30 <HAL_RCC_OscConfig+0x2dc>)
 80009b0:	b17a      	cbz	r2, 80009d2 <HAL_RCC_OscConfig+0x17e>
      __HAL_RCC_LSI_ENABLE();
 80009b2:	2201      	movs	r2, #1
 80009b4:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 80009b6:	f7ff fdfd 	bl	80005b4 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80009ba:	4d5b      	ldr	r5, [pc, #364]	; (8000b28 <HAL_RCC_OscConfig+0x2d4>)
      tickstart = HAL_GetTick();
 80009bc:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80009be:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 80009c0:	079f      	lsls	r7, r3, #30
 80009c2:	f53f af57 	bmi.w	8000874 <HAL_RCC_OscConfig+0x20>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80009c6:	f7ff fdf5 	bl	80005b4 <HAL_GetTick>
 80009ca:	1b80      	subs	r0, r0, r6
 80009cc:	2802      	cmp	r0, #2
 80009ce:	d9f6      	bls.n	80009be <HAL_RCC_OscConfig+0x16a>
 80009d0:	e785      	b.n	80008de <HAL_RCC_OscConfig+0x8a>
      __HAL_RCC_LSI_DISABLE();
 80009d2:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 80009d4:	f7ff fdee 	bl	80005b4 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80009d8:	4d53      	ldr	r5, [pc, #332]	; (8000b28 <HAL_RCC_OscConfig+0x2d4>)
      tickstart = HAL_GetTick();
 80009da:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80009dc:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 80009de:	0798      	lsls	r0, r3, #30
 80009e0:	f57f af48 	bpl.w	8000874 <HAL_RCC_OscConfig+0x20>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80009e4:	f7ff fde6 	bl	80005b4 <HAL_GetTick>
 80009e8:	1b80      	subs	r0, r0, r6
 80009ea:	2802      	cmp	r0, #2
 80009ec:	d9f6      	bls.n	80009dc <HAL_RCC_OscConfig+0x188>
 80009ee:	e776      	b.n	80008de <HAL_RCC_OscConfig+0x8a>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80009f0:	4b4d      	ldr	r3, [pc, #308]	; (8000b28 <HAL_RCC_OscConfig+0x2d4>)
 80009f2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80009f4:	f012 5280 	ands.w	r2, r2, #268435456	; 0x10000000
 80009f8:	d128      	bne.n	8000a4c <HAL_RCC_OscConfig+0x1f8>
      __HAL_RCC_PWR_CLK_ENABLE();
 80009fa:	9201      	str	r2, [sp, #4]
 80009fc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80009fe:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000a02:	641a      	str	r2, [r3, #64]	; 0x40
 8000a04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a0a:	9301      	str	r3, [sp, #4]
 8000a0c:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8000a0e:	2601      	movs	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000a10:	4d48      	ldr	r5, [pc, #288]	; (8000b34 <HAL_RCC_OscConfig+0x2e0>)
 8000a12:	682b      	ldr	r3, [r5, #0]
 8000a14:	05d9      	lsls	r1, r3, #23
 8000a16:	d51b      	bpl.n	8000a50 <HAL_RCC_OscConfig+0x1fc>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000a18:	68a3      	ldr	r3, [r4, #8]
 8000a1a:	4d43      	ldr	r5, [pc, #268]	; (8000b28 <HAL_RCC_OscConfig+0x2d4>)
 8000a1c:	2b01      	cmp	r3, #1
 8000a1e:	d127      	bne.n	8000a70 <HAL_RCC_OscConfig+0x21c>
 8000a20:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000a22:	f043 0301 	orr.w	r3, r3, #1
 8000a26:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 8000a28:	f7ff fdc4 	bl	80005b4 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000a2c:	4d3e      	ldr	r5, [pc, #248]	; (8000b28 <HAL_RCC_OscConfig+0x2d4>)
      tickstart = HAL_GetTick();
 8000a2e:	4607      	mov	r7, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000a30:	f241 3888 	movw	r8, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000a34:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000a36:	079b      	lsls	r3, r3, #30
 8000a38:	d539      	bpl.n	8000aae <HAL_RCC_OscConfig+0x25a>
    if(pwrclkchanged == SET)
 8000a3a:	2e00      	cmp	r6, #0
 8000a3c:	f43f af1e 	beq.w	800087c <HAL_RCC_OscConfig+0x28>
      __HAL_RCC_PWR_CLK_DISABLE();
 8000a40:	4a39      	ldr	r2, [pc, #228]	; (8000b28 <HAL_RCC_OscConfig+0x2d4>)
 8000a42:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8000a44:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000a48:	6413      	str	r3, [r2, #64]	; 0x40
 8000a4a:	e717      	b.n	800087c <HAL_RCC_OscConfig+0x28>
    FlagStatus       pwrclkchanged = RESET;
 8000a4c:	2600      	movs	r6, #0
 8000a4e:	e7df      	b.n	8000a10 <HAL_RCC_OscConfig+0x1bc>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000a50:	682b      	ldr	r3, [r5, #0]
 8000a52:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a56:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8000a58:	f7ff fdac 	bl	80005b4 <HAL_GetTick>
 8000a5c:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000a5e:	682b      	ldr	r3, [r5, #0]
 8000a60:	05da      	lsls	r2, r3, #23
 8000a62:	d4d9      	bmi.n	8000a18 <HAL_RCC_OscConfig+0x1c4>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000a64:	f7ff fda6 	bl	80005b4 <HAL_GetTick>
 8000a68:	1bc0      	subs	r0, r0, r7
 8000a6a:	2802      	cmp	r0, #2
 8000a6c:	d9f7      	bls.n	8000a5e <HAL_RCC_OscConfig+0x20a>
 8000a6e:	e736      	b.n	80008de <HAL_RCC_OscConfig+0x8a>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000a70:	2b05      	cmp	r3, #5
 8000a72:	d104      	bne.n	8000a7e <HAL_RCC_OscConfig+0x22a>
 8000a74:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000a76:	f043 0304 	orr.w	r3, r3, #4
 8000a7a:	672b      	str	r3, [r5, #112]	; 0x70
 8000a7c:	e7d0      	b.n	8000a20 <HAL_RCC_OscConfig+0x1cc>
 8000a7e:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8000a80:	f022 0201 	bic.w	r2, r2, #1
 8000a84:	672a      	str	r2, [r5, #112]	; 0x70
 8000a86:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8000a88:	f022 0204 	bic.w	r2, r2, #4
 8000a8c:	672a      	str	r2, [r5, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	d1ca      	bne.n	8000a28 <HAL_RCC_OscConfig+0x1d4>
      tickstart = HAL_GetTick();
 8000a92:	f7ff fd8f 	bl	80005b4 <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000a96:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8000a9a:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000a9c:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000a9e:	0798      	lsls	r0, r3, #30
 8000aa0:	d5cb      	bpl.n	8000a3a <HAL_RCC_OscConfig+0x1e6>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000aa2:	f7ff fd87 	bl	80005b4 <HAL_GetTick>
 8000aa6:	1bc0      	subs	r0, r0, r7
 8000aa8:	4540      	cmp	r0, r8
 8000aaa:	d9f7      	bls.n	8000a9c <HAL_RCC_OscConfig+0x248>
 8000aac:	e717      	b.n	80008de <HAL_RCC_OscConfig+0x8a>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000aae:	f7ff fd81 	bl	80005b4 <HAL_GetTick>
 8000ab2:	1bc0      	subs	r0, r0, r7
 8000ab4:	4540      	cmp	r0, r8
 8000ab6:	d9bd      	bls.n	8000a34 <HAL_RCC_OscConfig+0x1e0>
 8000ab8:	e711      	b.n	80008de <HAL_RCC_OscConfig+0x8a>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8000aba:	4d1b      	ldr	r5, [pc, #108]	; (8000b28 <HAL_RCC_OscConfig+0x2d4>)
 8000abc:	68ab      	ldr	r3, [r5, #8]
 8000abe:	f003 030c 	and.w	r3, r3, #12
 8000ac2:	2b08      	cmp	r3, #8
 8000ac4:	d047      	beq.n	8000b56 <HAL_RCC_OscConfig+0x302>
 8000ac6:	4e1c      	ldr	r6, [pc, #112]	; (8000b38 <HAL_RCC_OscConfig+0x2e4>)
 8000ac8:	2300      	movs	r3, #0
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000aca:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 8000acc:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000ace:	d135      	bne.n	8000b3c <HAL_RCC_OscConfig+0x2e8>
        tickstart = HAL_GetTick();
 8000ad0:	f7ff fd70 	bl	80005b4 <HAL_GetTick>
 8000ad4:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000ad6:	682b      	ldr	r3, [r5, #0]
 8000ad8:	0199      	lsls	r1, r3, #6
 8000ada:	d41e      	bmi.n	8000b1a <HAL_RCC_OscConfig+0x2c6>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8000adc:	e9d4 3207 	ldrd	r3, r2, [r4, #28]
 8000ae0:	4313      	orrs	r3, r2
 8000ae2:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8000ae4:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8000ae8:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8000aea:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8000aee:	6aa2      	ldr	r2, [r4, #40]	; 0x28
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000af0:	4c0d      	ldr	r4, [pc, #52]	; (8000b28 <HAL_RCC_OscConfig+0x2d4>)
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8000af2:	0852      	lsrs	r2, r2, #1
 8000af4:	3a01      	subs	r2, #1
 8000af6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000afa:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8000afc:	2301      	movs	r3, #1
 8000afe:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8000b00:	f7ff fd58 	bl	80005b4 <HAL_GetTick>
 8000b04:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000b06:	6823      	ldr	r3, [r4, #0]
 8000b08:	019a      	lsls	r2, r3, #6
 8000b0a:	f53f aebb 	bmi.w	8000884 <HAL_RCC_OscConfig+0x30>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000b0e:	f7ff fd51 	bl	80005b4 <HAL_GetTick>
 8000b12:	1b40      	subs	r0, r0, r5
 8000b14:	2802      	cmp	r0, #2
 8000b16:	d9f6      	bls.n	8000b06 <HAL_RCC_OscConfig+0x2b2>
 8000b18:	e6e1      	b.n	80008de <HAL_RCC_OscConfig+0x8a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000b1a:	f7ff fd4b 	bl	80005b4 <HAL_GetTick>
 8000b1e:	1bc0      	subs	r0, r0, r7
 8000b20:	2802      	cmp	r0, #2
 8000b22:	d9d8      	bls.n	8000ad6 <HAL_RCC_OscConfig+0x282>
 8000b24:	e6db      	b.n	80008de <HAL_RCC_OscConfig+0x8a>
 8000b26:	bf00      	nop
 8000b28:	40023800 	.word	0x40023800
 8000b2c:	42470000 	.word	0x42470000
 8000b30:	42470e80 	.word	0x42470e80
 8000b34:	40007000 	.word	0x40007000
 8000b38:	42470060 	.word	0x42470060
        tickstart = HAL_GetTick();
 8000b3c:	f7ff fd3a 	bl	80005b4 <HAL_GetTick>
 8000b40:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000b42:	682b      	ldr	r3, [r5, #0]
 8000b44:	019b      	lsls	r3, r3, #6
 8000b46:	f57f ae9d 	bpl.w	8000884 <HAL_RCC_OscConfig+0x30>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000b4a:	f7ff fd33 	bl	80005b4 <HAL_GetTick>
 8000b4e:	1b00      	subs	r0, r0, r4
 8000b50:	2802      	cmp	r0, #2
 8000b52:	d9f6      	bls.n	8000b42 <HAL_RCC_OscConfig+0x2ee>
 8000b54:	e6c3      	b.n	80008de <HAL_RCC_OscConfig+0x8a>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8000b56:	2801      	cmp	r0, #1
 8000b58:	f43f aec2 	beq.w	80008e0 <HAL_RCC_OscConfig+0x8c>
        pll_config = RCC->PLLCFGR;
 8000b5c:	6868      	ldr	r0, [r5, #4]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000b5e:	69e3      	ldr	r3, [r4, #28]
 8000b60:	f400 0280 	and.w	r2, r0, #4194304	; 0x400000
 8000b64:	429a      	cmp	r2, r3
 8000b66:	f47f ae79 	bne.w	800085c <HAL_RCC_OscConfig+0x8>
 8000b6a:	6a22      	ldr	r2, [r4, #32]
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8000b6c:	f000 033f 	and.w	r3, r0, #63	; 0x3f
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000b70:	4293      	cmp	r3, r2
 8000b72:	f47f ae73 	bne.w	800085c <HAL_RCC_OscConfig+0x8>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8000b76:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8000b78:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8000b7c:	4003      	ands	r3, r0
 8000b7e:	4293      	cmp	r3, r2
 8000b80:	f47f ae6c 	bne.w	800085c <HAL_RCC_OscConfig+0x8>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8000b84:	6aa2      	ldr	r2, [r4, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8000b86:	f400 3340 	and.w	r3, r0, #196608	; 0x30000
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8000b8a:	4293      	cmp	r3, r2
 8000b8c:	f47f ae66 	bne.w	800085c <HAL_RCC_OscConfig+0x8>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8000b90:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8000b92:	f000 6070 	and.w	r0, r0, #251658240	; 0xf000000
    return HAL_ERROR;
 8000b96:	1ac0      	subs	r0, r0, r3
 8000b98:	bf18      	it	ne
 8000b9a:	2001      	movne	r0, #1
 8000b9c:	e6a0      	b.n	80008e0 <HAL_RCC_OscConfig+0x8c>
 8000b9e:	bf00      	nop

08000ba0 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000ba0:	4913      	ldr	r1, [pc, #76]	; (8000bf0 <HAL_RCC_GetSysClockFreq+0x50>)
{
 8000ba2:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000ba4:	688b      	ldr	r3, [r1, #8]
 8000ba6:	f003 030c 	and.w	r3, r3, #12
 8000baa:	2b04      	cmp	r3, #4
 8000bac:	d003      	beq.n	8000bb6 <HAL_RCC_GetSysClockFreq+0x16>
 8000bae:	2b08      	cmp	r3, #8
 8000bb0:	d003      	beq.n	8000bba <HAL_RCC_GetSysClockFreq+0x1a>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8000bb2:	4810      	ldr	r0, [pc, #64]	; (8000bf4 <HAL_RCC_GetSysClockFreq+0x54>)
    {
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
 8000bb4:	e000      	b.n	8000bb8 <HAL_RCC_GetSysClockFreq+0x18>
      sysclockfreq = HSE_VALUE;
 8000bb6:	4810      	ldr	r0, [pc, #64]	; (8000bf8 <HAL_RCC_GetSysClockFreq+0x58>)
}
 8000bb8:	bd08      	pop	{r3, pc}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000bba:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8000bbc:	684b      	ldr	r3, [r1, #4]
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000bbe:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8000bc0:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000bc4:	bf14      	ite	ne
 8000bc6:	480c      	ldrne	r0, [pc, #48]	; (8000bf8 <HAL_RCC_GetSysClockFreq+0x58>)
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000bc8:	480a      	ldreq	r0, [pc, #40]	; (8000bf4 <HAL_RCC_GetSysClockFreq+0x54>)
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000bca:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8000bce:	bf18      	it	ne
 8000bd0:	2300      	movne	r3, #0
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000bd2:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000bd6:	fba1 0100 	umull	r0, r1, r1, r0
 8000bda:	f7ff fafb 	bl	80001d4 <__aeabi_uldivmod>
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8000bde:	4b04      	ldr	r3, [pc, #16]	; (8000bf0 <HAL_RCC_GetSysClockFreq+0x50>)
 8000be0:	685b      	ldr	r3, [r3, #4]
 8000be2:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8000be6:	3301      	adds	r3, #1
 8000be8:	005b      	lsls	r3, r3, #1
      sysclockfreq = pllvco/pllp;
 8000bea:	fbb0 f0f3 	udiv	r0, r0, r3
 8000bee:	e7e3      	b.n	8000bb8 <HAL_RCC_GetSysClockFreq+0x18>
 8000bf0:	40023800 	.word	0x40023800
 8000bf4:	00f42400 	.word	0x00f42400
 8000bf8:	007a1200 	.word	0x007a1200

08000bfc <HAL_RCC_ClockConfig>:
{
 8000bfc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000c00:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 8000c02:	4604      	mov	r4, r0
 8000c04:	b910      	cbnz	r0, 8000c0c <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8000c06:	2001      	movs	r0, #1
}
 8000c08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8000c0c:	4b43      	ldr	r3, [pc, #268]	; (8000d1c <HAL_RCC_ClockConfig+0x120>)
 8000c0e:	681a      	ldr	r2, [r3, #0]
 8000c10:	f002 020f 	and.w	r2, r2, #15
 8000c14:	428a      	cmp	r2, r1
 8000c16:	d328      	bcc.n	8000c6a <HAL_RCC_ClockConfig+0x6e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000c18:	6821      	ldr	r1, [r4, #0]
 8000c1a:	078f      	lsls	r7, r1, #30
 8000c1c:	d42d      	bmi.n	8000c7a <HAL_RCC_ClockConfig+0x7e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000c1e:	07c8      	lsls	r0, r1, #31
 8000c20:	d440      	bmi.n	8000ca4 <HAL_RCC_ClockConfig+0xa8>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8000c22:	4b3e      	ldr	r3, [pc, #248]	; (8000d1c <HAL_RCC_ClockConfig+0x120>)
 8000c24:	681a      	ldr	r2, [r3, #0]
 8000c26:	f002 020f 	and.w	r2, r2, #15
 8000c2a:	42aa      	cmp	r2, r5
 8000c2c:	d865      	bhi.n	8000cfa <HAL_RCC_ClockConfig+0xfe>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000c2e:	6822      	ldr	r2, [r4, #0]
 8000c30:	0751      	lsls	r1, r2, #29
 8000c32:	d46b      	bmi.n	8000d0c <HAL_RCC_ClockConfig+0x110>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000c34:	0713      	lsls	r3, r2, #28
 8000c36:	d507      	bpl.n	8000c48 <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8000c38:	4a39      	ldr	r2, [pc, #228]	; (8000d20 <HAL_RCC_ClockConfig+0x124>)
 8000c3a:	6921      	ldr	r1, [r4, #16]
 8000c3c:	6893      	ldr	r3, [r2, #8]
 8000c3e:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8000c42:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8000c46:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8000c48:	f7ff ffaa 	bl	8000ba0 <HAL_RCC_GetSysClockFreq>
 8000c4c:	4b34      	ldr	r3, [pc, #208]	; (8000d20 <HAL_RCC_ClockConfig+0x124>)
 8000c4e:	4a35      	ldr	r2, [pc, #212]	; (8000d24 <HAL_RCC_ClockConfig+0x128>)
 8000c50:	689b      	ldr	r3, [r3, #8]
 8000c52:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8000c56:	5cd3      	ldrb	r3, [r2, r3]
 8000c58:	40d8      	lsrs	r0, r3
 8000c5a:	4b33      	ldr	r3, [pc, #204]	; (8000d28 <HAL_RCC_ClockConfig+0x12c>)
 8000c5c:	6018      	str	r0, [r3, #0]
  HAL_InitTick (uwTickPrio);
 8000c5e:	4b33      	ldr	r3, [pc, #204]	; (8000d2c <HAL_RCC_ClockConfig+0x130>)
 8000c60:	6818      	ldr	r0, [r3, #0]
 8000c62:	f7ff fc5f 	bl	8000524 <HAL_InitTick>
  return HAL_OK;
 8000c66:	2000      	movs	r0, #0
 8000c68:	e7ce      	b.n	8000c08 <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000c6a:	b2ca      	uxtb	r2, r1
 8000c6c:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	f003 030f 	and.w	r3, r3, #15
 8000c74:	428b      	cmp	r3, r1
 8000c76:	d1c6      	bne.n	8000c06 <HAL_RCC_ClockConfig+0xa>
 8000c78:	e7ce      	b.n	8000c18 <HAL_RCC_ClockConfig+0x1c>
 8000c7a:	4b29      	ldr	r3, [pc, #164]	; (8000d20 <HAL_RCC_ClockConfig+0x124>)
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000c7c:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8000c80:	bf1e      	ittt	ne
 8000c82:	689a      	ldrne	r2, [r3, #8]
 8000c84:	f442 52e0 	orrne.w	r2, r2, #7168	; 0x1c00
 8000c88:	609a      	strne	r2, [r3, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000c8a:	070e      	lsls	r6, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8000c8c:	bf42      	ittt	mi
 8000c8e:	689a      	ldrmi	r2, [r3, #8]
 8000c90:	f442 4260 	orrmi.w	r2, r2, #57344	; 0xe000
 8000c94:	609a      	strmi	r2, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000c96:	689a      	ldr	r2, [r3, #8]
 8000c98:	68a0      	ldr	r0, [r4, #8]
 8000c9a:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8000c9e:	4302      	orrs	r2, r0
 8000ca0:	609a      	str	r2, [r3, #8]
 8000ca2:	e7bc      	b.n	8000c1e <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000ca4:	6862      	ldr	r2, [r4, #4]
 8000ca6:	4b1e      	ldr	r3, [pc, #120]	; (8000d20 <HAL_RCC_ClockConfig+0x124>)
 8000ca8:	2a01      	cmp	r2, #1
 8000caa:	d11c      	bne.n	8000ce6 <HAL_RCC_ClockConfig+0xea>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000cac:	681b      	ldr	r3, [r3, #0]
 8000cae:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000cb2:	d0a8      	beq.n	8000c06 <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000cb4:	4e1a      	ldr	r6, [pc, #104]	; (8000d20 <HAL_RCC_ClockConfig+0x124>)
 8000cb6:	68b3      	ldr	r3, [r6, #8]
 8000cb8:	f023 0303 	bic.w	r3, r3, #3
 8000cbc:	4313      	orrs	r3, r2
 8000cbe:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8000cc0:	f7ff fc78 	bl	80005b4 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000cc4:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8000cc8:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000cca:	68b3      	ldr	r3, [r6, #8]
 8000ccc:	6862      	ldr	r2, [r4, #4]
 8000cce:	f003 030c 	and.w	r3, r3, #12
 8000cd2:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8000cd6:	d0a4      	beq.n	8000c22 <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000cd8:	f7ff fc6c 	bl	80005b4 <HAL_GetTick>
 8000cdc:	1bc0      	subs	r0, r0, r7
 8000cde:	4540      	cmp	r0, r8
 8000ce0:	d9f3      	bls.n	8000cca <HAL_RCC_ClockConfig+0xce>
        return HAL_TIMEOUT;
 8000ce2:	2003      	movs	r0, #3
 8000ce4:	e790      	b.n	8000c08 <HAL_RCC_ClockConfig+0xc>
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8000ce6:	1e91      	subs	r1, r2, #2
 8000ce8:	2901      	cmp	r1, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000cea:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8000cec:	d802      	bhi.n	8000cf4 <HAL_RCC_ClockConfig+0xf8>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000cee:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8000cf2:	e7de      	b.n	8000cb2 <HAL_RCC_ClockConfig+0xb6>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000cf4:	f013 0f02 	tst.w	r3, #2
 8000cf8:	e7db      	b.n	8000cb2 <HAL_RCC_ClockConfig+0xb6>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000cfa:	b2ea      	uxtb	r2, r5
 8000cfc:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	f003 030f 	and.w	r3, r3, #15
 8000d04:	42ab      	cmp	r3, r5
 8000d06:	f47f af7e 	bne.w	8000c06 <HAL_RCC_ClockConfig+0xa>
 8000d0a:	e790      	b.n	8000c2e <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000d0c:	4904      	ldr	r1, [pc, #16]	; (8000d20 <HAL_RCC_ClockConfig+0x124>)
 8000d0e:	68e0      	ldr	r0, [r4, #12]
 8000d10:	688b      	ldr	r3, [r1, #8]
 8000d12:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8000d16:	4303      	orrs	r3, r0
 8000d18:	608b      	str	r3, [r1, #8]
 8000d1a:	e78b      	b.n	8000c34 <HAL_RCC_ClockConfig+0x38>
 8000d1c:	40023c00 	.word	0x40023c00
 8000d20:	40023800 	.word	0x40023800
 8000d24:	08000f04 	.word	0x08000f04
 8000d28:	20000000 	.word	0x20000000
 8000d2c:	20000008 	.word	0x20000008

08000d30 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000d30:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000d68 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000d34:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000d36:	e003      	b.n	8000d40 <LoopCopyDataInit>

08000d38 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000d38:	4b0c      	ldr	r3, [pc, #48]	; (8000d6c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000d3a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000d3c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000d3e:	3104      	adds	r1, #4

08000d40 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000d40:	480b      	ldr	r0, [pc, #44]	; (8000d70 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000d42:	4b0c      	ldr	r3, [pc, #48]	; (8000d74 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000d44:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000d46:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000d48:	d3f6      	bcc.n	8000d38 <CopyDataInit>
  ldr  r2, =_sbss
 8000d4a:	4a0b      	ldr	r2, [pc, #44]	; (8000d78 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000d4c:	e002      	b.n	8000d54 <LoopFillZerobss>

08000d4e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000d4e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000d50:	f842 3b04 	str.w	r3, [r2], #4

08000d54 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000d54:	4b09      	ldr	r3, [pc, #36]	; (8000d7c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000d56:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000d58:	d3f9      	bcc.n	8000d4e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000d5a:	f7ff fbbb 	bl	80004d4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000d5e:	f000 f8a1 	bl	8000ea4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d62:	f000 f80f 	bl	8000d84 <main>
  bx  lr    
 8000d66:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000d68:	20018000 	.word	0x20018000
  ldr  r3, =_sidata
 8000d6c:	08000f2c 	.word	0x08000f2c
  ldr  r0, =_sdata
 8000d70:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000d74:	2000000c 	.word	0x2000000c
  ldr  r2, =_sbss
 8000d78:	2000000c 	.word	0x2000000c
  ldr  r3, = _ebss
 8000d7c:	20000040 	.word	0x20000040

08000d80 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d80:	e7fe      	b.n	8000d80 <ADC_IRQHandler>
	...

08000d84 <main>:
  * @brief  Main program
  * @param  None
  * @retval None
  */
int main(void)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	b094      	sub	sp, #80	; 0x50
       - Configure the Flash prefetch, instruction and Data caches
       - Configure the Systick to generate an interrupt each 1 msec
       - Set NVIC Group Priority to 4
       - Global MSP (MCU Support Package) initialization
     */
  HAL_Init();
 8000d88:	f7ff fbee 	bl	8000568 <HAL_Init>
{
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_OscInitTypeDef RCC_OscInitStruct;

  /* Enable Power Control clock */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d8c:	4c3b      	ldr	r4, [pc, #236]	; (8000e7c <main+0xf8>)
  
  /* The voltage scaling allows optimizing the power consumption when the device is 
     clocked below the maximum system frequency, to update the voltage scaling value 
     regarding system frequency refer to product datasheet.  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000d8e:	493c      	ldr	r1, [pc, #240]	; (8000e80 <main+0xfc>)
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d90:	2200      	movs	r2, #0
 8000d92:	9201      	str	r2, [sp, #4]
 8000d94:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000d96:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d9a:	6423      	str	r3, [r4, #64]	; 0x40
 8000d9c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000d9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000da2:	9301      	str	r3, [sp, #4]
 8000da4:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000da6:	9202      	str	r2, [sp, #8]
 8000da8:	680b      	ldr	r3, [r1, #0]
 8000daa:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000dae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000db2:	600b      	str	r3, [r1, #0]
 8000db4:	680b      	ldr	r3, [r1, #0]
 8000db6:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000dba:	9302      	str	r3, [sp, #8]
  
  /* Enable HSI Oscillator and activate PLL with HSI as source */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000dbc:	2502      	movs	r5, #2
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000dbe:	9b02      	ldr	r3, [sp, #8]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000dc0:	9508      	str	r5, [sp, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = 0x10;
 8000dc2:	2310      	movs	r3, #16
 8000dc4:	2701      	movs	r7, #1
 8000dc6:	e9cd 730b 	strd	r7, r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000dca:	e9cd 520e 	strd	r5, r2, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000dce:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000dd0:	f44f 72a8 	mov.w	r2, #336	; 0x150
 8000dd4:	2304      	movs	r3, #4
 8000dd6:	e9cd 2311 	strd	r2, r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 7;
  if(HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000dda:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000ddc:	2307      	movs	r3, #7
 8000dde:	9313      	str	r3, [sp, #76]	; 0x4c
  if(HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000de0:	f7ff fd38 	bl	8000854 <HAL_RCC_OscConfig>
 8000de4:	b100      	cbz	r0, 8000de8 <main+0x64>
 8000de6:	e7fe      	b.n	8000de6 <main+0x62>
    Error_Handler();
  }
  
  /* Select PLL as system clock source and configure the HCLK, PCLK1 and PCLK2 
     clocks dividers */
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 8000de8:	230f      	movs	r3, #15
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000dea:	e9cd 3503 	strd	r3, r5, [sp, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;  
 8000dee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000df2:	9005      	str	r0, [sp, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;  
 8000df4:	e9cd 3006 	strd	r3, r0, [sp, #24]
  if(HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000df8:	4629      	mov	r1, r5
 8000dfa:	a803      	add	r0, sp, #12
 8000dfc:	f7ff fefe 	bl	8000bfc <HAL_RCC_ClockConfig>
 8000e00:	4606      	mov	r6, r0
 8000e02:	b100      	cbz	r0, 8000e06 <main+0x82>
 8000e04:	e7fe      	b.n	8000e04 <main+0x80>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e06:	9003      	str	r0, [sp, #12]
 8000e08:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8000e0a:	f043 0301 	orr.w	r3, r3, #1
 8000e0e:	6323      	str	r3, [r4, #48]	; 0x30
 8000e10:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8000e12:	f003 0301 	and.w	r3, r3, #1
 8000e16:	9303      	str	r3, [sp, #12]
 8000e18:	9b03      	ldr	r3, [sp, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e1a:	9008      	str	r0, [sp, #32]
 8000e1c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8000e1e:	f043 0304 	orr.w	r3, r3, #4
 8000e22:	6323      	str	r3, [r4, #48]	; 0x30
 8000e24:	6b23      	ldr	r3, [r4, #48]	; 0x30
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000e26:	4c17      	ldr	r4, [pc, #92]	; (8000e84 <main+0x100>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e28:	f003 0304 	and.w	r3, r3, #4
 8000e2c:	9308      	str	r3, [sp, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 8000e2e:	e9c4 0502 	strd	r0, r5, [r4, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct); 
 8000e32:	4621      	mov	r1, r4
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e34:	9b08      	ldr	r3, [sp, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct); 
 8000e36:	4814      	ldr	r0, [pc, #80]	; (8000e88 <main+0x104>)
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000e38:	2320      	movs	r3, #32
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e3a:	e9c4 3700 	strd	r3, r7, [r4]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct); 
 8000e3e:	f7ff fc2f 	bl	80006a0 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000e42:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e46:	4621      	mov	r1, r4
 8000e48:	4810      	ldr	r0, [pc, #64]	; (8000e8c <main+0x108>)
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e4a:	e9c4 3600 	strd	r3, r6, [r4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 8000e4e:	e9c4 5502 	strd	r5, r5, [r4, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e52:	f7ff fc25 	bl	80006a0 <HAL_GPIO_Init>
  HAL_Delay(100);
 8000e56:	2064      	movs	r0, #100	; 0x64
 8000e58:	f7ff fbb2 	bl	80005c0 <HAL_Delay>
	  if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13))
 8000e5c:	4d0b      	ldr	r5, [pc, #44]	; (8000e8c <main+0x108>)
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 8000e5e:	4c0a      	ldr	r4, [pc, #40]	; (8000e88 <main+0x104>)
	  if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13))
 8000e60:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000e64:	4628      	mov	r0, r5
 8000e66:	f7ff fce9 	bl	800083c <HAL_GPIO_ReadPin>
 8000e6a:	b128      	cbz	r0, 8000e78 <main+0xf4>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8000e6c:	2200      	movs	r2, #0
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 8000e6e:	2120      	movs	r1, #32
 8000e70:	4620      	mov	r0, r4
 8000e72:	f7ff fce9 	bl	8000848 <HAL_GPIO_WritePin>
 8000e76:	e7f3      	b.n	8000e60 <main+0xdc>
 8000e78:	2201      	movs	r2, #1
 8000e7a:	e7f8      	b.n	8000e6e <main+0xea>
 8000e7c:	40023800 	.word	0x40023800
 8000e80:	40007000 	.word	0x40007000
 8000e84:	20000028 	.word	0x20000028
 8000e88:	40020000 	.word	0x40020000
 8000e8c:	40020800 	.word	0x40020800

08000e90 <NMI_Handler>:
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
}
 8000e90:	4770      	bx	lr

08000e92 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8000e92:	e7fe      	b.n	8000e92 <HardFault_Handler>

08000e94 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 8000e94:	e7fe      	b.n	8000e94 <MemManage_Handler>

08000e96 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 8000e96:	e7fe      	b.n	8000e96 <BusFault_Handler>

08000e98 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 8000e98:	e7fe      	b.n	8000e98 <UsageFault_Handler>

08000e9a <SVC_Handler>:
 8000e9a:	4770      	bx	lr

08000e9c <DebugMon_Handler>:
 8000e9c:	4770      	bx	lr

08000e9e <PendSV_Handler>:
 8000e9e:	4770      	bx	lr

08000ea0 <SysTick_Handler>:
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
  HAL_IncTick();
 8000ea0:	f7ff bb7c 	b.w	800059c <HAL_IncTick>

08000ea4 <__libc_init_array>:
 8000ea4:	b570      	push	{r4, r5, r6, lr}
 8000ea6:	4e0d      	ldr	r6, [pc, #52]	; (8000edc <__libc_init_array+0x38>)
 8000ea8:	4c0d      	ldr	r4, [pc, #52]	; (8000ee0 <__libc_init_array+0x3c>)
 8000eaa:	1ba4      	subs	r4, r4, r6
 8000eac:	10a4      	asrs	r4, r4, #2
 8000eae:	2500      	movs	r5, #0
 8000eb0:	42a5      	cmp	r5, r4
 8000eb2:	d109      	bne.n	8000ec8 <__libc_init_array+0x24>
 8000eb4:	4e0b      	ldr	r6, [pc, #44]	; (8000ee4 <__libc_init_array+0x40>)
 8000eb6:	4c0c      	ldr	r4, [pc, #48]	; (8000ee8 <__libc_init_array+0x44>)
 8000eb8:	f000 f818 	bl	8000eec <_init>
 8000ebc:	1ba4      	subs	r4, r4, r6
 8000ebe:	10a4      	asrs	r4, r4, #2
 8000ec0:	2500      	movs	r5, #0
 8000ec2:	42a5      	cmp	r5, r4
 8000ec4:	d105      	bne.n	8000ed2 <__libc_init_array+0x2e>
 8000ec6:	bd70      	pop	{r4, r5, r6, pc}
 8000ec8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000ecc:	4798      	blx	r3
 8000ece:	3501      	adds	r5, #1
 8000ed0:	e7ee      	b.n	8000eb0 <__libc_init_array+0xc>
 8000ed2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000ed6:	4798      	blx	r3
 8000ed8:	3501      	adds	r5, #1
 8000eda:	e7f2      	b.n	8000ec2 <__libc_init_array+0x1e>
 8000edc:	08000f24 	.word	0x08000f24
 8000ee0:	08000f24 	.word	0x08000f24
 8000ee4:	08000f24 	.word	0x08000f24
 8000ee8:	08000f28 	.word	0x08000f28

08000eec <_init>:
 8000eec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000eee:	bf00      	nop
 8000ef0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000ef2:	bc08      	pop	{r3}
 8000ef4:	469e      	mov	lr, r3
 8000ef6:	4770      	bx	lr

08000ef8 <_fini>:
 8000ef8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000efa:	bf00      	nop
 8000efc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000efe:	bc08      	pop	{r3}
 8000f00:	469e      	mov	lr, r3
 8000f02:	4770      	bx	lr
